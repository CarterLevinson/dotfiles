# vim: filetype=i3config

#
# i3 config file (v4)
# Please see https://i3wm.org/docs/userguide.html for a complete reference!
#

# use super as mod key
set $mod Mod4
set $alt Mod1

# text rendering and scalability on retina/hidpi displays (thanks to pango).
# Font for window titles. Will also be used by the bar unless a different font
font pango:pango:Source Code Pro 8

# Autostart programs

exec --no-startup-id xrandr --output DP1 --primary --output HDMI1 --left-of DP1
## xss-lock: transfers session control to i3lock,
## activated using loginctl lock-session cmd
set $img $HOME/pictures/wallpapers/aphex_twin.png
exec --no-startup-id xss-lock -l -- i3lock --image=$img -tf --nofork
## xset: default screensave comes on after 30 minutes
exec --no-startup-id xset s 1800
## start the compositor
exec --no-startup-id picom &
## use the feh script to generate desktop wallpaper
exec --no-startup-id  ~/.fehbg &

#exec --no-startup-id mega-cmd-server &
## Use pactl to adjust volume in PulseAudio.
set $refresh_i3status killall -SIGUSR1 i3status
bindsym XF86AudioRaiseVolume exec --no-startup-id pactl \
          set-sink-volume DEFAULT_SINK@ +10% && $refresh_i3status
bindsym XF86AudioLowerVolume exec --no-startup-id pactl \
          set-sink-volume @+ShiftDEFAULT_SINK@ -10% && $refresh_i3status
bindsym XF86AudioMute exec --no-startup-id pactl \
          set-sink-mute @DEFAULT_SINK@ toggle && $refresh_i3status
bindsym XF86AudioMicMute exec --no-startup-id pactl \
          set-source-mute @DEFAULT_SOURCE@ toggle && $refresh_i3status
# print screen to take a screenshot using scrot
bindsym --release Print exec scrot -s '%Y:%m:%d:%H:%M:%S.png' \
          -e 'mv $f ~/pictures/screenshots'"
bindsym --release $mod+Print exec scrot -f '%Y:%m:%d:%H:%M:%S.png' \
          -e 'mv $f ~/pictures/screenshots'


# start a terminal
bindsym $mod+Return exec --no-startup-id $TERMINAL
# use fuzz change directory function in shell
bindsym $mod+Shift+Return exec --no-startup-id $TERMINAL $SHELL -is eval "cf ~"
# start a terminal running rangercd to switch $PWD on exit (relies on zshrc config)
bindsym $alt+Return exec --no-startup-id $TERMINAL $SHELL -is eval "rcd"

# start dmenu (a program launcher) or a desktop only version
bindsym $mod+d exec --no-startup-id i3-dmenu-desktop
#bindsym $mod+d exec dmenu_run

# use i3 window quick switch script
bindsym $mod+q exec --no-startup-id quickswitch
# add alt tab like behavior for i3
bindsym $alt+Tab exec i3-alt-tab.py next current
bindsym $alt+Shift+Tab exec i3-alt-tab.py prev current


# Window management configs

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# kill focused window
bindsym $mod+Shift+q kill

# change focus (remapped to vim deafults)
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right

# move focused window (remapped to vim defaults)
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right

# split in horizontal orientation with semicolon
bindsym $mod+semicolon split h

# split in vertical orientation
bindsym $mod+v split v

# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+Shift+s layout stacking
bindsym $mod+Shift+t layout tabbed
bindsym $mod+Shift+e layout toggle split

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle

# focus the parent container
bindsym $mod+a focus parent

# focus the child container
bindsym $mod+Shift+a focus child

# resizing windows

# Pressing left will shrink the window’s width.
# Pressing right will grow the window’s width.
# Pressing up will shrink the window’s height.
# Pressing down will grow the window’s height.
bindsym $mod+Left resize shrink width 1 px or 1 ppt
bindsym $mod+Down resize grow height 1 px or 1 ppt
bindsym $mod+Up resize shrink height 1 px or 1 ppt
bindsym $mod+Right resize grow width 1 px or 1 ppt

# same bindings, but larger magnitude
bindsym $mod+Control+Left resize shrink width 5 px or 5 ppt
bindsym $mod+Control+Down resize grow height 5 px or 5 ppt
bindsym $mod+Control+Up resize shrink height 5 px or 5 ppt
bindsym $mod+Control+Right resize grow width 5 px or 5 ppt

# Window configs

# disable title bar and thick borders
for_window [class="^.*"] border pixel 1
# make all R windows floating, do this for other repls

for_window [class="R_x11" instance = "r_x11"] floating enable

# Worksapce configs

# TODO: Workspace rules

# set display(s)
set $monitor1 "DP1"
set $monitor2 "HDMI1"

# Define names for default workspaces for which we configure key bindings later on.
# We use variables to avoid repeating the names in multiple places.
set $ws1 "1"
set $ws2 "2"
set $ws3 "3"
set $ws4 "4"
set $ws5 "5"
set $ws6 "6"
set $ws7 "7"
set $ws8 "8"
set $ws9 "9"
set $ws10 "10"
# send first 10 workspaces to first monitor
workspace $ws1 output $monitor1
workspace $ws2 output $monitor1
workspace $ws3 output $monitor1
workspace $ws4 output $monitor1
workspace $ws5 output $monitor1
workspace $ws6 output $monitor1
workspace $ws7 output $monitor1
workspace $ws8 output $monitor1
workspace $ws9 output $monitor1
workspace $ws10 output $monitor1
# switch to first 10 workspaces
bindsym $mod+1 workspace number $ws1
bindsym $mod+2 workspace number $ws2
bindsym $mod+3 workspace number $ws3
bindsym $mod+4 workspace number $ws4
bindsym $mod+5 workspace number $ws5
bindsym $mod+6 workspace number $ws6
bindsym $mod+7 workspace number $ws7
bindsym $mod+8 workspace number $ws8
bindsym $mod+9 workspace number $ws9
bindsym $mod+0 workspace number $ws10
# move focused container to one of first 10 workspaces
bindsym $mod+Shift+1 move container to workspace number $ws1
bindsym $mod+Shift+2 move container to workspace number $ws2
bindsym $mod+Shift+3 move container to workspace number $ws3
bindsym $mod+Shift+4 move container to workspace number $ws4
bindsym $mod+Shift+5 move container to workspace number $ws5
bindsym $mod+Shift+6 move container to workspace number $ws6
bindsym $mod+Shift+7 move container to workspace number $ws7
bindsym $mod+Shift+8 move container to workspace number $ws8
bindsym $mod+Shift+9 move container to workspace number $ws9
bindsym $mod+Shift+0 move container to workspace number $ws10
# make 10 more workspaces
set $ws11 "11"
set $ws12 "12"
set $ws13 "13"
set $ws14 "14"
set $ws15 "15"
set $ws16 "16"
set $ws17 "17"
set $ws18 "18"
set $ws19 "19"
set $ws20 "20"
# send these 10 workspaces to the prmimary
workspace $ws11 output $monitor2
workspace $ws12 output $monitor2
workspace $ws13 output $monitor2
workspace $ws14 output $monitor2
workspace $ws15 output $monitor2
workspace $ws16 output $monitor2
workspace $ws17 output $monitor2
workspace $ws18 output $monitor2
workspace $ws19 output $monitor2
workspace $ws20 output $monitor2
# switch to one of next 10 workspaces
bindsym $mod+Control+1 workspace number $ws11
bindsym $mod+Control+2 workspace number $ws12
bindsym $mod+Control+3 workspace number $ws13
bindsym $mod+Control+4 workspace number $ws14
bindsym $mod+Control+5 workspace number $ws15
bindsym $mod+Control+6 workspace number $ws16
bindsym $mod+Control+7 workspace number $ws17
bindsym $mod+Control+8 workspace number $ws18
bindsym $mod+Control+9 workspace number $ws19
bindsym $mod+Control+0 workspace number $ws20
# move focused container to workspace on secondary workspaces
bindsym $mod+Shift+Control+1 move container to workspace $ws11
bindsym $mod+Shift+Control+2 move container to workspace $ws12
bindsym $mod+Shift+Control+3 move container to workspace $ws13
bindsym $mod+Shift+Control+4 move container to workspace $ws14
bindsym $mod+Shift+Control+5 move container to workspace $ws15
bindsym $mod+Shift+Control+6 move container to workspace $ws16
bindsym $mod+Shift+Control+7 move container to workspace $ws17
bindsym $mod+Shift+Control+8 move container to workspace $ws18
bindsym $mod+Shift+Control+9 move container to workspace $ws19
bindsym $mod+Shift+Control+0 move container to workspace $ws20
# we can potentially add 10 more workspaces and use alt / $mod1

# reload the configuration file
bindsym $mod+Shift+c reload
# open configuration file
bindsym $mod+c exec --no-startup-id kitty $VISUAL ~/.config/i3/config
# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart
# exit i3 (logs you out of your X session)

# User Defined i3 modes

mode  "e(X)it (L)ock (S)uspend (R)eboot (P)oweroff" {

  #do i want to change this to kill all processes for $USER?
  bindsym $mod+x exec pkill -f 'xss-lock'; exec i3-msg -q exit
  bindsym $mod+l mode "default"; exec --no-startup-id loginctl lock-session
  bindsym $mod+s mode "default"; exec --no-startup-id systemctl hibernate-sleep
  bindsym $mod+r exec systemctl reboot
  bindsym $mod+p exec systemctl poweroff

  # back to normal press exit or escape
  bindsym Return mode "default"
  bindsym Escape mode "default"
}
bindsym $mod+Shift+x mode "e(X)it (L)ock (S)uspend (R)eboot (P)oweroff"


mode "Application Launcher" {
  # These bindings trigger as soon as you enter the launcher mode

  # top row
  bindsym q exec --no-startup-id $BROWSER; mode "default";
  bindsym w exec --no-startup-id wxmaxima; mode "default";
  bindsym e exec --no-startup-id $TERMINAL $SHELL -c $VISUAL /tmp/scratch.txt; mode "default";
  bindsym p exec --no-startup-id $TERMINAL $SHELL -c ipython; mode "default";
  bindsym t exec --no-startup-id tradingview; mode "default";
  # bindsym u exec --no-startup-id asy

  # home row
  bindsym a exec --no-startup-id $TERMINAL $SHELL -c  asy; mode "default";
  bindsym f exec --no-startup-id firefox; mode "default";
  bindsym g exec --no-startup-id $TERMINAL $SHELL -c ghci; mode "default";
  bindsym h exec --no-startup-id $TERMINAL $SHELL -c htop; mode "default";
  #bindsym g exec --no-startup-id $TERMINAL $SHELL -c ginsh; mode "default";

  # bottom row
  bindsym m exec --no-startup-id $TERMINAL $SHELL -c aerc; mode "default";
  bindsym c exec --no-startup-id $TERMINAL $SHELL -c calcurse; mode "default";
  bindsym b exec --no-startup-id $TERMINAL $SHELL -c bc --quiet; mode "default";
  bindsym v exec --no-startup-id vpv; mode "default";
  # bindysm c exec --no-startup-id $TERMINAL $SHELL -c weechat; mode "default";


  # back to normal
  bindsym Return mode "default"
  bindsym Escape mode "default"
}
bindsym $mod+o mode "Application Launcher"

# Define papis mode
mode "papis" {
  # These bindings trigger as soon as you enter papis mode

  # open document
  bindsym $mod+o exec python3 -m papis.main \
    --pick-lib --set picktool dmenu open

  # edit documents
  bindsym $mod+e exec python3 -m papis.main \
    --pick-lib --set picktool dmenu --set editor $VISUAL edit

	# open document's url
  bindsym $mod+b exec python3 -m papis.main \
    --pick-lib --set picktool dmenu browse

  # return to default mode
	#bindsym Ctrl+c mode "default"
  bindsym Return mode "default"
 	bindsym Escape mode "default"
}
bindsym $mod+p mode "papis"

# Press $mod+Shift+g to enter the gap mode. Choose o or i for modifying outer/
# inner gaps. Press one of + / - (in-/decrement for current workspace) or 0
# (remove gaps for current workspace). If you also press Shift with these keys,
# the change will be global for all workspaces.
set $mode_gaps Gaps: (o) outer, (i) inner
set $mode_gaps_outer Outer Gaps: +|-|0 (local), Shift + +|-|0 (global)
set $mode_gaps_inner Inner Gaps: +|-|0 (local), Shift + +|-|0 (global)
bindsym $mod+Shift+g mode "$mode_gaps"

mode "$mode_gaps" {
  bindsym o      mode "$mode_gaps_outer"
  bindsym i      mode "$mode_gaps_inner"
  bindsym Return mode "default"
  bindsym Escape mode "default"
}

gaps outer 20
gaps inner 15

mode "$mode_gaps_inner" {
  bindsym plus  gaps inner current plus 5
  bindsym minus gaps inner current minus 5
  bindsym 0     gaps inner current set 0

  bindsym Shift+plus  gaps inner all plus 5
  bindsym Shift+minus gaps inner all minus 5
  bindsym Shift+0     gaps inner all set 0

  bindsym Return mode "default"
  bindsym Escape mode "default"
}
mode "$mode_gaps_outer" {
  bindsym plus  gaps outer current plus 5
  bindsym minus gaps outer current minus 5
  bindsym 0     gaps outer current set 0

  bindsym Shift+plus  gaps outer all plus 5
  bindsym Shift+minus gaps outer all minus 5
  bindsym Shift+0     gaps outer all set 0

  bindsym Return mode "default"
  bindsym Escape mode "default"
}

# "py3" status bar
bar {
  position top
  # position bottom
  status_command py3status
}
